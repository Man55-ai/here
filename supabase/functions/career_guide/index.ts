// supabase/functions/career_guide/index.ts
// Simple heuristic career recommender (returns JSON your app expects)

import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const cors = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
};

serve(async (req) => {
  if (req.method === "OPTIONS") return new Response("ok", { headers: cors });

  try {
    const { context = "" } = await req.json().catch(() => ({ context: "" }));

    // --- Heuristic: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ---
    const lc = String(context || "").toLowerCase();
    const hit = (w: string) =>
      (lc.match(new RegExp(`\\b${w.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}\\b`, "g")) || []).length;

    const buckets: Record<string, number> = {
      "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (Flutter)": hit("flutter") + hit("dart") + hit("app") + hit("mobile") + hit("supabase"),
      "‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Analyst)": hit("data") + hit("sql") + hit("excel") + hit("analysis") + hit("chart"),
      "‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UX/UI": hit("ui") + hit("ux") + hit("design") + hit("figma") + hit("prototype"),
      "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå (Full-stack)": hit("code") + hit("program") + hit("backend") + hit("api") + hit("database"),
      "‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•": hit("marketing") + hit("campaign") + hit("tiktok") + hit("facebook") + hit("seo"),
      "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö Front-end": hit("javascript") + hit("react") + hit("vue") + hit("html") + hit("css"),
    };

    const sorted = Object.entries(buckets).sort((a, b) => b[1] - a[1]);
    const top = sorted.filter(([, v]) => v > 0).slice(0, 3);

    const recs = (top.length ? top : [["‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", 1]]).map(([title, score], i) => {
      const fit = Math.max(55, Math.min(95, Number(score) * 8 + 55 - i * 5));
      const reason =
        title === "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
          ? "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö/‡∏ó‡∏±‡∏Å‡∏©‡∏∞/‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°"
          : `‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô "${title}" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
      const next_steps = [
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á 1 ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        "‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2‚Äì4 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏Ñ‡∏≠‡∏°‡∏°‡∏π‡∏ô‡∏¥‡∏ï‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå",
      ];
      return { title, reason, fit_score: fit, next_steps };
    });

    return new Response(JSON.stringify(recs), {
      headers: { "Content-Type": "application/json", ...cors },
	"Content-Type": "application/json; charset=utf-8", // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° charset
      status: 200,
    });
  } catch (e) {
    return new Response(JSON.stringify({ error: String(e?.message ?? e) }), {
      headers: { "Content-Type": "application/json", ...cors },
      status: 400,
    });
  }
});
