import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:agora_rtc_engine/agora_rtc_engine.dart' as rtc;
import 'package:permission_handler/permission_handler.dart';

// ============== AGORA CONFIG (‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö) ==========
const String kAgoraAppId = 'ef54689f18ea41178508e35bf38a8280';

// üëá ‡πÉ‡∏™‡πà Temp Token ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì generate ‡∏°‡∏≤‡πÅ‡∏ó‡∏ô null (dev ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
// ‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Token Server
final String? kAgoraTempToken =
    '007eJxTYFjyYCOz2KSU1mo1pmmx1btttCbXLd6RcmXLk99RH9duL7urwJCaZmpiZmGZZmiRmmhiaGhuYWpgkWpsmpRmbJFoYWRhIHnoSkZDICPD844XTIwMEAjiszF4pBal+qYyMAAA9zgiDg==';
// ============================================================

// Supabase client + helper
final SupabaseClient _sb = Supabase.instance.client;
String? get _uid => _sb.auth.currentUser?.id;

// ====================== MODELS =============================
class Booking {
  final String id;
  final String userId;
  final String doctorId;
  final DateTime slotDate; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå DATE
  final String fullName;
  final String phone;
  final String status;

  Booking({
    required this.id,
    required this.userId,
    required this.doctorId,
    required this.slotDate,
    required this.fullName,
    required this.phone,
    required this.status,
  });

  factory Booking.fromMap(Map m) => Booking(
        id: m['id'] as String,
        userId: m['user_id'] as String,
        doctorId: m['doctor_id'] as String,
        // Supabase ‡∏™‡πà‡∏á DATE ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á 'YYYY-MM-DD' -> parse ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        slotDate: DateTime.parse(m['slot_date'] as String).toLocal(),
        fullName: (m['full_name'] ?? '') as String,
        phone: (m['phone'] ?? '') as String,
        status: (m['status'] ?? 'booked') as String,
      );
}

class DocChat {
  final String id;
  final String bookingId;
  final String senderId;
  final String role; // 'user' | 'doctor'
  final String text;
  final DateTime createdAt;

  DocChat({
    required this.id,
    required this.bookingId,
    required this.senderId,
    required this.role,
    required this.text,
    required this.createdAt,
  });

  factory DocChat.fromMap(Map m) => DocChat(
        id: m['id'] as String,
        bookingId: m['booking_id'] as String,
        senderId: m['sender_id'] as String,
        role: (m['role'] ?? 'user') as String,
        text: (m['text'] ?? '') as String,
        createdAt: DateTime.parse(m['created_at'] as String).toLocal(),
      );
}
// ============================================================

// ===================== DB SERVICE ==========================
class DoctorDB {
  static String _fmtYmd(DateTime d) => '${d.year.toString().padLeft(4, '0')}-'
      '${d.month.toString().padLeft(2, '0')}-'
      '${d.day.toString().padLeft(2, '0')}';

  /// ‡∏î‡∏∂‡∏á "‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ" ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static Future<Booking?> fetchLatestBooking() async {
    final userId = _uid;
    if (userId == null) return null;

    final today = DateTime.now();
    final ymd = DateTime(today.year, today.month, today.day);

    final rows = await _sb
        .from('doctor_bookings')
        .select()
        .eq('user_id', userId)
        .inFilter('status', ['booked', 'confirmed'])
        .gte('slot_date', _fmtYmd(ymd)) // DATE ‚Üí 'YYYY-MM-DD'
        .order('slot_date', ascending: true)
        .limit(1);

    if (rows.isEmpty) return null;
    return Booking.fromMap(rows.first as Map);
  }

  static Future<String> createBooking({
    required DateTime slotDate, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô
    required String doctorId,
    required String fullName,
    required String phone,
  }) async {
    final userId = _uid;
    if (userId == null) throw Exception('Not signed in');

    final data = await _sb
        .from('doctor_bookings')
        .insert({
          'user_id': userId,
          'doctor_id': doctorId,
          'slot_date':
              _fmtYmd(DateTime(slotDate.year, slotDate.month, slotDate.day)),
          'full_name': fullName,
          'phone': phone,
          'status': 'booked',
        })
        .select()
        .single();

    return data['id'] as String;
  }

  static Stream<List<DocChat>> chatStream(String bookingId) {
    return _sb
        .from('doctor_messages')
        .stream(primaryKey: ['id'])
        .eq('booking_id', bookingId)
        .order('created_at')
        .map((rows) => rows.map((e) => DocChat.fromMap(e as Map)).toList());
  }

  static Future<void> sendChat({
    required String bookingId,
    required String text,
  }) async {
    final userId = _uid;
    if (userId == null) throw Exception('Not signed in');

    await _sb.from('doctor_messages').insert({
      'booking_id': bookingId,
      'sender_id': userId,
      'role': 'user',
      'text': text,
    });
  }
}
// ============================================================

// =================== BOOKING HELPER ========================
class BookingHelper {
  /// ‡πÄ‡∏î‡πâ‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• + ‡πÄ‡∏ö‡∏≠‡∏£‡πå" ‡∏Å‡πà‡∏≠‡∏ô insert ‡∏•‡∏á doctor_bookings
  static Future<String?> confirmAndCreateBooking({
    required BuildContext context,
    required DateTime slotDate,
    required String doctorId,
  }) async {
    final nameCtrl = TextEditingController();
    final phoneCtrl = TextEditingController();

    final ok = await showDialog<bool>(
          context: context,
          builder: (ctx) => AlertDialog(
            title: const Text('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≠‡∏á'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameCtrl,
                  decoration: const InputDecoration(labelText: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'),
                ),
                TextField(
                  controller: phoneCtrl,
                  keyboardType: TextInputType.phone,
                  decoration: const InputDecoration(labelText: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå'),
                ),
                const SizedBox(height: 8),
                Text('‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î: ${_fmtThaiDate(slotDate)}'),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(ctx, false),
                  child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')),
              FilledButton(
                  onPressed: () => Navigator.pop(ctx, true),
                  child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≠‡∏á')),
            ],
          ),
        ) ??
        false;

    if (!ok) return null;

    final fullName = nameCtrl.text.trim();
    final phone = phoneCtrl.text.trim();
    if (fullName.isEmpty || phone.length < 9) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')),
        );
      }
      return null;
    }

    final id = await DoctorDB.createBooking(
      slotDate: slotDate,
      doctorId: doctorId,
      fullName: fullName,
      phone: phone,
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')));
    }
    return id;
  }
}
// ============================================================

// =================== DRAWER MENU TILE ======================
class DoctorChatMenuTile extends StatelessWidget {
  const DoctorChatMenuTile({super.key});
  @override
  Widget build(BuildContext context) {
    return FutureBuilder<Booking?>(
      future: DoctorDB.fetchLatestBooking(),
      builder: (ctx, snap) {
        final hasBooking = (snap.data != null);
        return ListTile(
          leading: const Icon(Icons.medical_services_outlined),
          title: const Text('‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠'),
          enabled: hasBooking,
          onTap: hasBooking
              ? () => Navigator.of(context).pushNamed('/doctorChat')
              : () => ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß ‡πÑ‡∏õ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞')),
                  ),
        );
      },
    );
  }
}
// ============================================================

// =================== HUB PAGE + TABS =======================
class DoctorChatHubPage extends StatefulWidget {
  const DoctorChatHubPage({super.key});
  @override
  State<DoctorChatHubPage> createState() => _DoctorChatHubPageState();
}

class _DoctorChatHubPageState extends State<DoctorChatHubPage> {
  Booking? _booking;
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    final b = await DoctorDB.fetchLatestBooking();
    setState(() {
      _booking = b;
      _loading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (_booking == null) {
      return _EmptyState(
        title: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß',
        subtitle: '‡πÑ‡∏õ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠',
        action: () => Navigator.pushNamed(context, '/booking'),
      );
    }

    final b = _booking!;
    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î"
    final today = DateTime.now();
    final ready = !DateTime(today.year, today.month, today.day)
        .isBefore(DateTime(b.slotDate.year, b.slotDate.month, b.slotDate.day));

    if (!ready) {
      return Scaffold(
        appBar: AppBar(title: const Text('‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠')),
        body: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.event_available, size: 48),
              const SizedBox(height: 8),
              Text('‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${_fmtThaiDate(b.slotDate)}'),
              const SizedBox(height: 4),
              const Text('‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó/‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'),
            ],
          ),
        ),
      );
    }

    return DefaultTabController(
      length: 3,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠'),
          bottom: const TabBar(
            tabs: [
              Tab(text: '‡πÅ‡∏ä‡∏ó'),
              Tab(text: '‡πÇ‡∏ó‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á'),
              Tab(text: '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Ñ‡∏≠‡∏•')
            ],
          ),
        ),
        body: TabBarView(
          children: [
            _TextChatTab(bookingId: b.id),
            _VoiceCallTab(channelName: b.id),
            _VideoCallTab(channelName: b.id),
          ],
        ),
      ),
    );
  }
}

class _EmptyState extends StatelessWidget {
  final String title, subtitle;
  final VoidCallback action;
  const _EmptyState(
      {required this.title, required this.subtitle, required this.action});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≠')),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.chat_bubble_outline, size: 64),
            const SizedBox(height: 12),
            Text(title, style: Theme.of(context).textTheme.titleLarge),
            const SizedBox(height: 4),
            Text(subtitle),
            const SizedBox(height: 12),
            FilledButton(onPressed: action, child: const Text('‡πÑ‡∏õ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß')),
          ],
        ),
      ),
    );
  }
}

String _fmtThaiDate(DateTime d) =>
    '${d.day.toString().padLeft(2, '0')}/${d.month.toString().padLeft(2, '0')}/${(d.year + 543)}';

// ---------------------- Text Chat ------------------------
class _TextChatTab extends StatefulWidget {
  final String bookingId;
  const _TextChatTab({required this.bookingId});
  @override
  State<_TextChatTab> createState() => _TextChatTabState();
}

class _TextChatTabState extends State<_TextChatTab> {
  final _ctrl = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: StreamBuilder<List<DocChat>>(
            stream: DoctorDB.chatStream(widget.bookingId),
            builder: (ctx, snap) {
              final msgs = snap.data ?? [];
              return ListView.builder(
                padding: const EdgeInsets.all(12),
                itemCount: msgs.length,
                itemBuilder: (_, i) {
                  final m = msgs[i];
                  final mine = m.senderId == _uid;
                  return Align(
                    alignment:
                        mine ? Alignment.centerRight : Alignment.centerLeft,
                    child: Container(
                      margin: const EdgeInsets.symmetric(vertical: 4),
                      padding: const EdgeInsets.symmetric(
                          vertical: 8, horizontal: 12),
                      decoration: BoxDecoration(
                        color:
                            mine ? Colors.green.shade100 : Colors.grey.shade200,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(m.role == 'doctor' ? '‡∏´‡∏°‡∏≠' : '‡∏â‡∏±‡∏ô',
                              style: TextStyle(
                                  fontSize: 11, color: Colors.grey.shade700)),
                          Text(m.text),
                        ],
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
        SafeArea(
          child: Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _ctrl,
                  decoration: const InputDecoration(
                    hintText: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...',
                    contentPadding: EdgeInsets.symmetric(horizontal: 12),
                  ),
                ),
              ),
              IconButton(
                icon: const Icon(Icons.send),
                onPressed: () async {
                  final t = _ctrl.text.trim();
                  if (t.isEmpty) return;
                  await DoctorDB.sendChat(bookingId: widget.bookingId, text: t);
                  _ctrl.clear();
                },
              ),
            ],
          ),
        ),
      ],
    );
  }
}

// ---------------------- Voice Call (Agora RTC) ---------------
class _VoiceCallTab extends StatefulWidget {
  final String channelName;
  const _VoiceCallTab({required this.channelName});
  @override
  State<_VoiceCallTab> createState() => _VoiceCallTabState();
}

class _VoiceCallTabState extends State<_VoiceCallTab> {
  late final rtc.RtcEngine _engine;
  bool _joined = false;
  bool _micOn = true;

  @override
  void initState() {
    super.initState();
    _init();
  }

  Future<void> _init() async {
    await [Permission.microphone].request();

    _engine = rtc.createAgoraRtcEngine();
    await _engine.initialize(const rtc.RtcEngineContext(appId: kAgoraAppId));

    _engine.registerEventHandler(rtc.RtcEngineEventHandler(
      onJoinChannelSuccess: (conn, elapsed) {
        setState(() => _joined = true);
      },
      onLeaveChannel: (conn, stats) {
        setState(() => _joined = false);
      },
    ));

    await _engine.enableAudio();

    await _engine.joinChannel(
      token: kAgoraTempToken ?? '', // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô String
      channelId: widget.channelName,
      uid: 0,
      options: const rtc.ChannelMediaOptions(
        channelProfile: rtc.ChannelProfileType.channelProfileCommunication,
        clientRoleType: rtc.ClientRoleType.clientRoleBroadcaster,
      ),
    );
  }

  @override
  void dispose() {
    _engine.leaveChannel();
    _engine.release();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Center(child: Text(_joined ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‚Ä¶' : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‚Ä¶')),
        Positioned(
          left: 16,
          right: 16,
          bottom: 24,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              FloatingActionButton(
                heroTag: 'mic',
                onPressed: () async {
                  _micOn = !_micOn;
                  await _engine.muteLocalAudioStream(!_micOn);
                  setState(() {});
                },
                child: Icon(_micOn ? Icons.mic : Icons.mic_off),
              ),
              FloatingActionButton(
                heroTag: 'hang',
                backgroundColor: Colors.red,
                onPressed: () async {
                  await _engine.leaveChannel();
                  if (mounted) Navigator.pop(context);
                },
                child: const Icon(Icons.call_end),
              ),
            ],
          ),
        ),
      ],
    );
  }
}

// ---------------------- Video Call (Agora RTC) ---------------
class _VideoCallTab extends StatefulWidget {
  final String channelName;
  const _VideoCallTab({required this.channelName});
  @override
  State<_VideoCallTab> createState() => _VideoCallTabState();
}

class _VideoCallTabState extends State<_VideoCallTab> {
  late final rtc.RtcEngine _engine;
  int? _remoteUid;
  bool _joined = false;
  bool _micOn = true;
  bool _camOn = true;

  @override
  void initState() {
    super.initState();
    _init();
  }

  Future<void> _init() async {
    await [Permission.microphone, Permission.camera].request();

    _engine = rtc.createAgoraRtcEngine();
    await _engine.initialize(const rtc.RtcEngineContext(appId: kAgoraAppId));

    _engine.registerEventHandler(rtc.RtcEngineEventHandler(
      onJoinChannelSuccess: (conn, elapsed) {
        setState(() => _joined = true);
      },
      onLeaveChannel: (conn, stats) {
        setState(() {
          _joined = false;
          _remoteUid = null;
        });
      },
      onUserJoined: (conn, remoteUid, elapsed) {
        setState(() => _remoteUid = remoteUid);
      },
      onUserOffline: (conn, remoteUid, reason) {
        setState(() => _remoteUid = null);
      },
    ));

    await _engine.enableVideo();
    await _engine.startPreview();
    await [Permission.microphone, Permission.camera].request();

    await _engine.joinChannel(
      token: kAgoraTempToken ?? '',
      channelId: widget.channelName,
      uid: 0,
      options: const rtc.ChannelMediaOptions(
        channelProfile: rtc.ChannelProfileType.channelProfileCommunication,
        clientRoleType: rtc.ClientRoleType.clientRoleBroadcaster,
      ),
    );
  }

  @override
  void dispose() {
    _engine.leaveChannel();
    _engine.release();
    super.dispose();
  }

  Widget _videoRemoteOrLocal() {
    if (!_joined) {
      return const Center(child: Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‚Ä¶'));
    }
    if (_remoteUid != null) {
      // üîß ‡πÉ‡∏ä‡πâ AgoraVideoView + VideoViewController.remote
      return rtc.AgoraVideoView(
        controller: rtc.VideoViewController.remote(
          rtcEngine: _engine, // ‚Üê ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á engine ‡∏î‡πâ‡∏ß‡∏¢
          canvas: rtc.VideoCanvas(uid: _remoteUid),
          connection: rtc.RtcConnection(
              channelId: widget.channelName), // ‚Üê ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠ connection
        ),
      );
    }
    // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ù‡∏±‡πà‡∏á‡∏´‡∏°‡∏≠ ‚Üí ‡πÅ‡∏™‡∏î‡∏á local view ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    return rtc.AgoraVideoView(
      controller: rtc.VideoViewController(
        rtcEngine: _engine,
        canvas: const rtc.VideoCanvas(uid: 0),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Positioned.fill(child: _videoRemoteOrLocal()),
        // PiP local
        Positioned(
          left: 16,
          right: 16,
          bottom: 24,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              // Toggle mic
              FloatingActionButton(
                heroTag: 'mic',
                onPressed: () async {
                  _micOn = !_micOn;
                  await _engine.muteLocalAudioStream(!_micOn);
                  setState(() {});
                },
                child: Icon(_micOn ? Icons.mic : Icons.mic_off),
              ),

              // Toggle camera
              FloatingActionButton(
                heroTag: 'cam',
                onPressed: () async {
                  _camOn = !_camOn;
                  await _engine.muteLocalVideoStream(!_camOn);
                  setState(() {});
                },
                child: Icon(_camOn ? Icons.videocam : Icons.videocam_off),
              ),

              // Switch front/back camera
              FloatingActionButton(
                heroTag: 'switch',
                onPressed: () async {
                  await _engine.switchCamera();
                },
                child: const Icon(Icons.cameraswitch),
              ),

              // Hang up
              FloatingActionButton(
                heroTag: 'hang',
                backgroundColor: Colors.red,
                onPressed: () async {
                  await _engine.leaveChannel();
                  await _engine.release(); // üëà ‡∏õ‡∏•‡πà‡∏≠‡∏¢ resource ‡∏î‡πâ‡∏ß‡∏¢
                  if (mounted) Navigator.pop(context);
                },
                child: const Icon(Icons.call_end),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
